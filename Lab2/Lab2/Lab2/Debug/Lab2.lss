
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a21  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000339  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	68 c0       	rjmp	.+208    	; 0x16c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRB  = 0b11110000;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11110000;
  a2:	88 bb       	out	0x18, r24	; 24
	DDRD  = 0b00000000;
  a4:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	82 bb       	out	0x12, r24	; 18

	while (1) // loop forever
	{
		PORTB = 0b01100000;			//Tekbot move forward
  aa:	90 e6       	ldi	r25, 0x60	; 96
		else if (PIND == 0b11111110) {
			PORTB = 0b01100000;		//Tekbot move forward
			_delay_ms(1000);		//wait for 1 s
			PORTB = 0b00000000;     // move backward
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01000000;     // turn right
  ac:	30 e4       	ldi	r19, 0x40	; 64
		if (PIND == 0b11111101) {
			PORTB = 0b01100000;		//Tekbot move forward
			_delay_ms(1000);		//wait for 0.5 s
			PORTB = 0b00000000;     // move backward
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b00100000;     // turn left
  ae:	20 e2       	ldi	r18, 0x20	; 32
	DDRD  = 0b00000000;
	PORTD = 0b11111111;

	while (1) // loop forever
	{
		PORTB = 0b01100000;			//Tekbot move forward
  b0:	98 bb       	out	0x18, r25	; 24
		
		// If left whisker hit, turn left
		if (PIND == 0b11111101) {
  b2:	80 b3       	in	r24, 0x10	; 16
  b4:	8d 3f       	cpi	r24, 0xFD	; 253
  b6:	f9 f4       	brne	.+62     	; 0xf6 <main+0x58>
			PORTB = 0b01100000;		//Tekbot move forward
  b8:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	53 ed       	ldi	r21, 0xD3	; 211
  be:	80 e3       	ldi	r24, 0x30	; 48
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x2c>
  ca:	00 00       	nop
			_delay_ms(1000);		//wait for 0.5 s
			PORTB = 0b00000000;     // move backward
  cc:	18 ba       	out	0x18, r1	; 24
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	53 ed       	ldi	r21, 0xD3	; 211
  d2:	80 e3       	ldi	r24, 0x30	; 48
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	50 40       	sbci	r21, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x36>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x40>
  de:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b00100000;     // turn left
  e0:	28 bb       	out	0x18, r18	; 24
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	59 e6       	ldi	r21, 0x69	; 105
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x4a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x54>
  f2:	00 00       	nop
  f4:	dd cf       	rjmp	.-70     	; 0xb0 <main+0x12>
			_delay_ms(500);         // wait for 0.5 s
		}
		// If right whisker is hit, turn right
		else if (PIND == 0b11111110) {
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	8e 3f       	cpi	r24, 0xFE	; 254
  fa:	f9 f4       	brne	.+62     	; 0x13a <main+0x9c>
			PORTB = 0b01100000;		//Tekbot move forward
  fc:	98 bb       	out	0x18, r25	; 24
  fe:	4f ef       	ldi	r20, 0xFF	; 255
 100:	53 ed       	ldi	r21, 0xD3	; 211
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	41 50       	subi	r20, 0x01	; 1
 106:	50 40       	sbci	r21, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x66>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x70>
 10e:	00 00       	nop
			_delay_ms(1000);		//wait for 1 s
			PORTB = 0b00000000;     // move backward
 110:	18 ba       	out	0x18, r1	; 24
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	53 ed       	ldi	r21, 0xD3	; 211
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	50 40       	sbci	r21, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x7a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x84>
 122:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01000000;     // turn right
 124:	38 bb       	out	0x18, r19	; 24
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	59 e6       	ldi	r21, 0x69	; 105
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x8e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x98>
 136:	00 00       	nop
 138:	bb cf       	rjmp	.-138    	; 0xb0 <main+0x12>
			_delay_ms(500);         // wait for 0.5 s
		}
		//If both whiskers are hit, move forward
		else if (PIND == 0b11111100) {
 13a:	80 b3       	in	r24, 0x10	; 16
 13c:	8c 3f       	cpi	r24, 0xFC	; 252
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0xa4>
 140:	b7 cf       	rjmp	.-146    	; 0xb0 <main+0x12>
			PORTB = 0b01100000;		//Tekbot move forward
 142:	98 bb       	out	0x18, r25	; 24
 144:	4f ef       	ldi	r20, 0xFF	; 255
 146:	53 ed       	ldi	r21, 0xD3	; 211
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	50 40       	sbci	r21, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0xac>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xb6>
 154:	00 00       	nop
			_delay_ms(1000);		//wait for 1 s
			PORTB = 0b00000000;     // move backward
 156:	18 ba       	out	0x18, r1	; 24
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	53 ed       	ldi	r21, 0xD3	; 211
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	41 50       	subi	r20, 0x01	; 1
 160:	50 40       	sbci	r21, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xc0>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xca>
 168:	00 00       	nop
 16a:	a2 cf       	rjmp	.-188    	; 0xb0 <main+0x12>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
